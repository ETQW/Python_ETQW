'''3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –ö–ª–µ—Ç–∫–∞.
–í –µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–µ—Ç–æ–∫ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
–í –∫–ª–∞—Å—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:
—Å–ª–æ–∂–µ–Ω–∏–µ (add()), –≤—ã—á–∏—Ç–∞–Ω–∏–µ (sub()), —É–º–Ω–æ–∂–µ–Ω–∏–µ (mul()), –¥–µ–ª–µ–Ω–∏–µ (truediv()).–î–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –∫–ª–µ—Ç–∫–∞–º –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ,
—É–º–µ–Ω—å—à–µ–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –æ–±—ã—á–Ω–æ–µ (–Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ) –¥–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –í –º–µ—Ç–æ–¥–µ –¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.
–°–ª–æ–∂–µ–Ω–∏–µ. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫. –ü—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–æ —è—á–µ–µ–∫ –æ–±—â–µ–π –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è —Å—É–º–º–µ —è—á–µ–µ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
–í—ã—á–∏—Ç–∞–Ω–∏–µ. –£—á–∞—Å—Ç–≤—É—é—Ç –¥–≤–µ –∫–ª–µ—Ç–∫–∏. –û–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω—É–ª—è,
–∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–£–º–Ω–æ–∂–µ–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—â–∞—è –∫–ª–µ—Ç–∫–∞ –∏–∑ –¥–≤—É—Ö. –ß–∏—Å–ª–æ —è—á–µ–µ–∫ –æ–±—â–µ–π –∫–ª–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ —ç—Ç–∏—Ö –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
–î–µ–ª–µ–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—â–∞—è –∫–ª–µ—Ç–∫–∞ –∏–∑ –¥–≤—É—Ö. –ß–∏—Å–ª–æ —è—á–µ–µ–∫ –æ–±—â–µ–π –∫–ª–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ —ç—Ç–∏—Ö –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
–í –∫–ª–∞—Å—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ make_order(), –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Ä—è–¥—É. –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏ –ø–æ —Ä—è–¥–∞–º.
–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ **\n\n***..., –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –º–µ–∂–¥—É \n —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É.
–ï—Å–ª–∏ —è—á–µ–µ–∫ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—è–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è.
–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –∫–ª–µ—Ç–∫–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 12, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Ä—è–¥—É ‚Äî 5. –¢–æ–≥–¥–∞ –º–µ—Ç–æ–¥ make_order() –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É: **\n\n.
–ò–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –∫–ª–µ—Ç–∫–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 15, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Ä—è–¥—É ‚Äî 5. –¢–æ–≥–¥–∞ –º–µ—Ç–æ–¥ make_order() –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É: **\n\n***.
–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ.'''


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f'–ö–ª–µ—Ç–∫–∞: {self.quantity * "üêñ"}'

    def __add__(self, other):
        return f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è = {other.quantity + self.quantity}\n{Cell(self.quantity + other.quantity)}'

    def __sub__(self, other):
        return f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–µ—Ç–∞–Ω–∏—è = {other.quantity - self.quantity}\n{Cell(other.quantity - self.quantity)}' if (other.quantity - self.quantity) > 0 else print(
            '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ!')

    def __mul__(self, other):
        return f'–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è = {int(self.quantity * other.quantity)}\n{Cell(int(self.quantity * other.quantity))}'

    def __truediv__(self, other):
        return f'–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è = {round(self.quantity // other.quantity)}\n{Cell(round(self.quantity // other.quantity))}\n'

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.quantity // cells_in_row)):
            row += f' {"üêñ" * cells_in_row} \\n'
        row += f' {"üêñ" * (self.quantity % cells_in_row)}'
        return row


cells1 = Cell(12)
cells2 = Cell(3)
print(cells1)
print(cells2)
print(cells1 + cells2)
print(cells1 - cells2)
print(cells1 * cells2)
print(cells1 / cells2)
print(cells1.make_order(5))
print(cells2.make_order(1))
